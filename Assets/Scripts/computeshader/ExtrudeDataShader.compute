// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


struct ExtrudeData
{
    //int indexvetices;
    float3 vertex;
};

RWStructuredBuffer<ExtrudeData> _vertices;

RWStructuredBuffer<int> indexA;
RWStructuredBuffer<int> indexB;

AppendStructuredBuffer<int> Result;

RWStructuredBuffer<bool> Resultbool;

RWStructuredBuffer<int> count;

//compute.Dispatch(_kernel, xGroup, yGroup, 1);
//compute.SetInts

[numthreads(32, 32, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    uint width, height;

    float distanceeee = distance(_vertices[id.x].vertex, _vertices[id.x].vertex);
    
    if (indexA[id.x] == indexA[id.y] || indexB[id.x] == indexA[id.y] && !Resultbool[indexB[id.y]])
    {
        Result.Append(indexB[id.y]);
        Resultbool[indexB[id.y]] = true;
        //count[0]++;
    }
    if (indexA[id.x] == indexB[id.y] || indexB[id.x] == indexB[id.y] && !Resultbool[indexA[id.y]])
    {
        Result.Append(indexA[id.y]);
        Resultbool[indexA[id.y]] = true;
        //count[0]++;
    }
}

int nice()
{
    return 1;
}