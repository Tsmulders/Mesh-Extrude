// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSMain2

RWStructuredBuffer<int> AIndex;
RWStructuredBuffer<int> BIndex;
RWStructuredBuffer<int> indexCheck;

AppendStructuredBuffer<int> Result;

RWStructuredBuffer<int> InsiteArray;

int max;

//RWStructuredBuffer<int> count;
//of naar 12 zetten
[numthreads(1, 32, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //make sure is not over the max intergresions
    if (id.x <= max)
    {
        //looks if it is comnectet to other vertices
        if (indexCheck[id.x] == AIndex[id.y] && InsiteArray[BIndex[id.y]] == 0)
        {
            //add to appended buffer sort of list
            Result.Append(BIndex[id.y]);
            InsiteArray[BIndex[id.y]] = 1;
            //count[0]++;
        }
        if (indexCheck[id.x] == BIndex[id.y] && InsiteArray[AIndex[id.y]] == 0)
        {
            //add to appended buffer sort of list
            Result.Append(AIndex[id.y]);
            InsiteArray[AIndex[id.y]] = 1;
            //count[0]++;
        }
    }
}

[numthreads(1, 91, 1)]
void CSMain2(uint3 id : SV_DispatchThreadID)
{
    //make sure is not over the max intergresions
    if (id.x <= max)
    {
        //looks if it is comnectet to other vertices
        if (indexCheck[id.x] == AIndex[id.y] && InsiteArray[BIndex[id.y]] == 0)
        {
            //add to appended buffer sort of list
            Result.Append(BIndex[id.y]);
            InsiteArray[BIndex[id.y]] = 1;
            //count[0]++;
        }
        if (indexCheck[id.x] == BIndex[id.y] && InsiteArray[AIndex[id.y]] == 0)
        {
            //add to appended buffer sort of list
            Result.Append(AIndex[id.y]);
            InsiteArray[AIndex[id.y]] = 1;
            //count[0]++;
        }
    }
}