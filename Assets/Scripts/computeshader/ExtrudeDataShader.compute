// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


//struct ExtrudeData
//{
//    //int indexvetices;
//    float3 vertex;
//};

//RWStructuredBuffer<ExtrudeData> _vertices;

RWStructuredBuffer<int> indexA;
RWStructuredBuffer<int> indexB;
RWStructuredBuffer<int> indexCheck;

AppendStructuredBuffer<int> Result;

RWStructuredBuffer<bool> boolInsiteArray;

//RWStructuredBuffer<int> count;


[numthreads(32, 32, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    uint width, height;

    //float distanceeee = distance(_vertices[id.x].vertex, _vertices[id.x].vertex);
    
    if (indexCheck[id.x] == indexA[id.y] || indexCheck[id.x] == indexA[id.y] && !boolInsiteArray[indexB[id.y]])
    {
        Result.Append(indexB[id.y]);
        boolInsiteArray[indexB[id.y]] = true;
        //count[0]++;
    }
    if (indexCheck[id.x] == indexB[id.y] || indexCheck[id.x] == indexB[id.y] && !boolInsiteArray[indexA[id.y]])
    {
        Result.Append(indexA[id.y]);
        boolInsiteArray[indexA[id.y]] = true;
        //count[0]++;
    }
}

int nice()
{
    return 1;
}