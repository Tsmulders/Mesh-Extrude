// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel test2

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;

//float4 color;

//RWBuffer<float3> wer;
//RWStructuredBuffer<int> buffer;



//[numthreads(8, 8, 1)]
//void CSMain(uint3 id : SV_DispatchThreadID)
//{
//    // TODO: insert actual code here!
     
//    Result[id.xy] = (id.x & id.y) * color;
//}

struct mesh_data
{
    float3 vertex;
    //float4x4 met;
};

RWStructuredBuffer<mesh_data> _vertices;
//StructuredBuffer<int> _triagles;
RWStructuredBuffer<bool> fountone;

float _Time;

bool _reverse;

[numthreads(8, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!    

    if (_reverse)
    {
        float3 ver = _vertices[id.x].vertex;
        ver.y = sin(_Time + ver.z - ver.x);

        _vertices[id.x].vertex = ver;
    }
    else
    {
        float3 ver = _vertices[id.x].vertex;
        ver.y = sin(_Time + ver.x / 2);
        
        _vertices[id.x].vertex = ver;
    }
}

AppendStructuredBuffer<int> result;
RWStructuredBuffer<int> result2;

[numthreads(1, 1, 1)]
void test2(uint3 id : SV_DispatchThreadID)
{
    if (id.x > 4)
    {
        result.Append(852);
    }
    if (id.x < 5)
    {
        result.Append(123);
    }
    result2[id.x] = 963;
}