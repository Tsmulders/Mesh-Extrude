// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel reassignTri 


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct data
{
    int firstVertices;
    AppendStructuredBuffer<int> vertices;
};

RWStructuredBuffer<float3> _vertices;

float threshold;
int firstVertices;

AppendStructuredBuffer<int> Result;

[numthreads(16,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    float _distance = distance(_vertices[firstVertices], _vertices[id.x]);
    
    if (_distance <= threshold && firstVertices != id.x)
    {
        Result.Append(id.x);
    }
}




[numthreads(16, 1, 1)]
void reassignTri(uint3 id : SV_DispatchThreadID)
{
    
    
}