// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
//#pragma kernel reassignTria2
#pragma kernel reassignTria3


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct data
{
    int firstVertices;
    AppendStructuredBuffer<int> vertices;
};

RWStructuredBuffer<float3> _vertices;

float threshold;
int firstVertices;

AppendStructuredBuffer<int> Result;
//get the  vertices that are on the same position
[numthreads(32,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float _distance = distance(_vertices[firstVertices], _vertices[id.x]);
    
    if (_distance <= threshold && firstVertices != id.x)
    {
        Result.Append(id.x);
    }
}


//RWStructuredBuffer<int> triangles;
//RWStructuredBuffer<int> newVerts;
//int setTo;

//[numthreads(1, 32, 1)]
//void reassignTria2(uint3 id : SV_DispatchThreadID)
//{
//    if (triangles[id.y] == newVerts[id.x])
//    {
//        triangles[id.y] = newVerts[0];
//    }
//}

RWStructuredBuffer<int> triangles;

int check;

int setTo;
//reassign the triangles 
[numthreads(32, 1, 1)]
void reassignTria3(uint3 id : SV_DispatchThreadID)
{
    if (triangles[id.x] == check)
    {
        triangles[id.x] = setTo;
    }
}