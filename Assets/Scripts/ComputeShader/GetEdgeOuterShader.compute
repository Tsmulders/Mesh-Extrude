// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct data
{
    float3 A;
    float3 B;
    int indexA;
    int indexB;
};

RWStructuredBuffer<data> edges;

RWStructuredBuffer<int> indexA;
RWStructuredBuffer<int> indexB;

//RWStructuredBuffer<float3> positionA;
//RWStructuredBuffer<float3> positionB;

//RWStructuredBuffer<bool> foundOne;
//RWStructuredBuffer<int> indexFound;

//RWStructuredBuffer<float3> positionACheck;

//RWStructuredBuffer<float3> positionBCheck;

AppendStructuredBuffer<int> result;

[numthreads(16, 16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    if (indexA[id.x] == indexA[id.y] &&
        indexB[id.x] == indexB[id.y] ||
        indexA[id.x] == indexB[id.y] &&
        indexB[id.x] == indexA[id.y] &&
        id.x != id.y)
    {
        result.Append(id.x);
    }
}

//bool check(float3 v1, float3 v2)
//{
//    //return abs(distance(v1, v2) <= epsilon);
    
//    if (distance(v1, v2) <= epsilon)
//    {
//        return true;
//    }
//}